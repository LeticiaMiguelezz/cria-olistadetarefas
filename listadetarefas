import React, { useState, useEffect} from 'react';
import AsyncStorage from
'@react-native-async-storage/async-storage';
import {View, StyleSheet, TextInput, Button, Text, FlatList, TouchableOpacity, Modal} from 'react-native';

const App = () => {
 const [tarefa, setTarefa] = useState('');
 const [listaTarefas, setListaTarefas] = useState([]);
 const [tarefaRemover, setTarefaRemover] = useState('');
 const [modalVisivel, setModalVisivel] = useState(false);

useEffect(() => {
 const carregarTarefas = async () => {
   const tarefasSalvas = await AsyncStorage.getItem('tarefas');
   if (tarefasSalvas) {
     setListaTarefas(JSON.parse(tarefasSalvas));
   }
 };
 carregarTarefas();
}, []);

const adicionarTarefa = async () => {
  if(tarefa.length === 0) return;
  const novasTarefas = [...listaTarefas, tarefa]; //adiciona tarefa ao final do vetor
  setListaTarefas(novasTarefas); // modifico a lista passando a informação que está guardada
  await AsyncStorage.setItem('tarefas', JSON.stringify(novasTarefas));//remonto a lista e mando pro storage
}

const removerTarefa = async () => {
  const listaAtualizada = listaTarefas.filter(t => t !== tarefaRemover);// ele pega o t e olha se o t é diferente do tarefaRemover, verificar se t que é a primeira tarefa é diferente da tarefa que quis remover
  setListaTarefas(listaAtualizada);//Depois que removi a tarefa eu guardei a informação na lista atualizada
  await AsyncStorage.setItem('tarefas', JSON.stringify(listaAtualizada));//mando a chave 'tarefas' e a informação que eu quero
  setTarefaRemover('');//garantir que esvazio a variavel dnv
  setModalVisivel(false);//Na hora que cliquei em remover eu mostrei o modal sem querer então preciso fazer com que ele desapareça no final
}

 return(
  <View style={styles.container}>
    <TextInput
      value={tarefa}
      onChangeText={setTarefa} // a medida que vou digitando ele vai atualizando a variavel
      placeholder='Digite uma tarefa'
      style={styles.input}
    />
    <Button title='Adicionar tarefa' onPress = {() => adicionarTarefa()} />
    <FlatList //renderizar os itens
    data={listaTarefas}
    renderItem={({ item }) =>(
      <View style={styles.itemContainer}>
        <Text style={styles.itemText}>{item}</Text>
          <TouchableOpacity 
          onPress={() => {
            setTarefaRemover(item)
            setModalVisivel(true)}}>
          
            <Text style={styles.removerButton}> Remover </Text> 
          </TouchableOpacity>
      </View>
    )}
    />

    <Modal 
    animationType='Slide'
    transparent={true}
    visible={modalVisivel}
    onRequestClose={() => setModalVisivel(false)}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <TextInput
            value={tarefaRemover}
            onChangeText={setTarefaRemover}
            style={styles.input}
          />
          <Button title = 'Remover Tarefa' onPress={removerTarefa}/>
          <Button title = 'Cancelar' onPress={() => setModalVisivel(false)}/>
        </View>
      </View>
    </Modal>
  </View>
);

// === faz compração de tipo também

}







const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  itemContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  removerButton: {
    color: 'red',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    width: '80%',
    alignItems: 'center',
  },
});

export default App;
